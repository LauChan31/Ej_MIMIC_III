{"cells":[{"cell_type":"markdown","id":"adjusted-jersey","metadata":{"id":"adjusted-jersey"},"source":["# Select patients requiring mechanical ventilation (aline study step 3)\n","Indwelling arterial catheters (IACs) are being used to monitor hemodynamics and also for blood gas analysis. However, those catheters  pose serious risks such as infections or vascular problems. The MIMIC-III dataset can be used to study if IAC use is associated with mortality in patients on the ICU. The queries in this notebook are based on the following paper:\n","\n","Hsu, D. J., Feng, M., Kothari, R., Zhou, H., Chen, K. P., & Celi, L. A. (2015). The association between indwelling arterial catheters and mortality in hemodynamically stable patients with respiratory failure: a propensity score analysis. Chest, 148(6), 1470-1476. <br><br>\n","\n","__Select adult patients requiring mechanical ventilation within the first 24 hours of ICU admission:__ <br>\n","For the aline study, we will only select patients from the ICU who required mechanical ventilation within the first 24 hours of\n","ICU admission. Since there are many itemid's that need to be specified, we first add them to a dictionary before running the query:"]},{"cell_type":"code","execution_count":null,"id":"greenhouse-combat","metadata":{"id":"greenhouse-combat"},"outputs":[],"source":["# Imports:\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from matplotlib import cm\n","import psycopg2\n","%matplotlib inline"]},{"cell_type":"code","execution_count":null,"id":"refined-imagination","metadata":{"id":"refined-imagination"},"outputs":[],"source":["# Configuration:\n","sqluser = 'postgres'\n","dbname = 'mimic'\n","password = 'postgres'\n","schema_name = 'mimiciii, public'\n","\n","# Connect to MIMIC\n","con = psycopg2.connect(dbname=dbname, user=sqluser, password=password)\n","cur = con.cursor()\n","\n","# Function to execute a query safely, used when we create a new table:\n","def execute_query_safely(sql, con, cur):\n","    cur = con.cursor()\n","    try:\n","        cur.execute(sql)\n","    except (Exception, psycopg2.DatabaseError) as error:\n","        print(error)\n","    finally:\n","        cur.close()\n","    return"]},{"cell_type":"code","execution_count":null,"id":"rocky-entrepreneur","metadata":{"id":"rocky-entrepreneur"},"outputs":[],"source":["mech_vent_itemids = \\\n","{\n","'chartevents_mechvent' : (445, 448, 449, 450, 1340, 1486, 1600, 224687, 639, 654, 681, 682, 683, 684,224685,224684,224686,\n","                          218,436,535,444,459,224697,224695,224696,224746,224747, 221,1,1211,1655,2000,226873,224738,224419,\n","                          224750,227187, 543, 5865,5866,224707,224709,224705,224706, 60,437,505,506,686,220339,224700, 3459,\n","                          501,502,503,224702, 223,667,668,669,670,671,672, 224701, 223849),\n","'ventilation_indicators': (720, 223849, 223848, 445, 448, 449, 450, 1340, 1486, 1600, 224687, 639, 654, 681, 682, 683, 684,\n","                            224685, 224684, 224686, 218,436,535,444,224697,224695,224696,224746,224747, 221,1,1211,1655,2000,\n","                            226873,224738,224419,224750,227187, 543, 5865,5866,224707,224709,224705,224706, 60,437,505,506,\n","                            686,220339,224700, 3459, 501,502,503,224702, 223,667,668,669,670,671,672, 224701),\n","'oxygen_indicators': (468, 469, 470, 471, 227287, 226732, 223834, 467, 640),\n","'extubation_indicators_mv': (227194, 225468, 225477),\n","'initiation_oxygen_226732': ('Nasal cannula', 'Face tent', 'Aerosol-cool', 'Trach mask ', 'High flow neb', 'Non-rebreather',\n","                      'Venti mask ', 'Medium conc mask ', 'T-piece', 'High flow nasal cannula', 'Ultrasonic neb', 'Vapomist'),\n","'initiation_oxygen_467' : ('Cannula', 'Nasal Cannula', 'Face Tent', 'Aerosol-Cool', 'Trach Mask', 'Hi Flow Neb',\n","                           'Non-Rebreather', 'Venti Mask', 'Medium Conc Mask', 'Vapotherm', 'T-Piece', 'Hood', 'Hut',\n","                           'TranstrachealCat', 'Heated Neb', 'Ultrasonic Neb')\n","}"]},{"cell_type":"code","execution_count":null,"id":"dutch-interference","metadata":{"id":"dutch-interference"},"outputs":[],"source":["query = \"\"\"\n","with mech_vent_table as (\n","    SELECT ce.icustay_id, ce.charttime\n","    -- MechVent column to determine if the charted item is related to mechanical ventilation:\n","      , MAX(CASE\n","            when ce.itemid is null or ce.value is null then 0\n","            when ce.itemid = 720 and ce.value != 'Other/Remarks' THEN 1\n","            when ce.itemid = 223848 and ce.value != 'Other' THEN 1\n","            when ce.itemid = 467 and ce.value = 'Ventilator' THEN 1\n","            when ce.itemid in \"\"\" + str(mech_vent_itemids['chartevents_mechvent']) + \"\"\" THEN 1\n","            else 0 end) as MechVent\n","\n","    --OxygenTherapy column, because initiation of oxygen means end of mechanical ventilation:\n","    , MAX(CASE\n","          when ce.itemid = 226732 and ce.value in \"\"\" + str(mech_vent_itemids['initiation_oxygen_226732']) + \"\"\" THEN 1\n","          when ce.itemid = 467 and ce.value in \"\"\" + str(mech_vent_itemids['initiation_oxygen_467']) + \"\"\" THEN 1\n","          else 0 end) as OxygenTherapy\n","\n","    --Extubated column to determine if the charted item is related to stopping the mechanical ventilation:\n","    , MAX(CASE\n","        when ce.itemid is null or ce.value is null THEN 0\n","        when ce.itemid = 640 and ce.value in ('Extubated', 'Self Extubation') THEN 1\n","        else 0 end) as Extubated\n","\n","    --SelfExtubated column:\n","    , 0 as SelfExtubated\n","FROM mimiciii.chartevents ce\n","WHERE ce.value is not null\n","AND (ce.error != 1 or ce.error IS NULL)\n","AND (ce.itemid in \"\"\" + str(mech_vent_itemids['oxygen_indicators']) + \"\"\"\n","OR (ce.itemid in \"\"\" + str(mech_vent_itemids['ventilation_indicators']) + \"\"\" ))\n","GROUP BY ce.icustay_id, ce.charttime\n","UNION DISTINCT\n","-- We combine this table with the data from procedureevents_mv:\n","SELECT mv.icustay_id, mv.starttime as charttime, 0 as MechVent, 0 as OxygenTherapy, 1 as Extubated,\n","    CASE when itemid = 225468 then 1 else 0 end as SelfExtubated\n","FROM mimiciii.procedureevents_mv mv\n","WHERE itemid in \"\"\" + str(mech_vent_itemids['extubation_indicators_mv']) + \"\"\"\n","),\n","--\n","charttime_lag_table as (\n","    SELECT m.icustay_id, m.charttime, m.mechvent, m.extubated, m.oxygentherapy,\n","        case\n","        when m.mechvent = 1 then\n","          LAG(m.charttime, 1) OVER (partition by m.icustay_id, m.mechvent order by m.charttime)\n","        else null\n","      end as charttime_lag\n","    FROM mech_vent_table m\n","),\n","new_ventilation_events as (\n","    SELECT m.icustay_id, m.charttime, m.mechvent, m.extubated, m.oxygentherapy,\n","        case\n","        -- if there is an extubation flag, we mark any subsequent ventilation as a new ventilation event\n","          --when Extubated = 1 then 0 -- extubation is *not* a new ventilation event, the *subsequent* row is\n","          when\n","            LAG(m.extubated ,1) OVER\n","            (partition by m.icustay_id, case when m.mechvent=1 or m.extubated=1 then 1 else 0 end\n","            order by m.charttime) = 1 then 1\n","          -- if patient has initiated oxygen therapy, and is not currently vented, start a newvent\n","          when m.mechvent = 0 and m.oxygentherapy = 1 then 1\n","            -- if there is less than 8 hours between vent settings, we do not treat this as a new ventilation event\n","          when m.charttime > (m.charttime_lag + interval '8' hour)\n","            then 1\n","        else 0\n","        end as newvent\n","    FROM charttime_lag_table m\n","),\n","number_of_ventilations as (\n","    SELECT m.icustay_id, m.charttime, m.mechvent,\n","    case when m.mechvent = 1 or m.extubated = 1\n","        THEN SUM(m.newvent) OVER (partition by m.icustay_id order by m.charttime)\n","        ELSE null end as ventnum\n","    FROM new_ventilation_events m\n","),\n","ventilated_at_least_once as (\n","    SELECT m.icustay_id, min(m.charttime) as starttime\n","    --ROW_NUMBER() over (partition by m.icustay_id order by m.ventnum) as ventnum\n","    FROM number_of_ventilations m\n","    GROUP BY m.icustay_id, m.ventnum\n","    HAVING (max(m.mechvent) = 1) AND (min(m.charttime) != max(m.charttime))\n","    order by m.icustay_id, m.ventnum\n","),\n","grouped_by_icustay as (\n","    SELECT m.icustay_id, min(m.starttime) as first_starttime\n","    FROM ventilated_at_least_once m\n","    GROUP BY m.icustay_id\n","),\n","exclusion_criteria as (\n","    SELECT ap.icustay_id,\n","    CASE\n","        WHEN (m.first_starttime > (ap.intime + interval '24' hour)) THEN 1\n","        WHEN m.first_starttime is null THEN 1\n","        ELSE 0 END as excl_cr\n","    FROM adult_patients ap\n","    LEFT JOIN grouped_by_icustay m ON ap.icustay_id = m.icustay_id\n",")\n","\n","-- Add the exclusion criterium to the adult_patients table so we can retrieve all exclusions in the end:\n","UPDATE adult_patients\n","SET exclusion_mechanical_ventilation = exclusion_criteria.excl_cr\n","FROM exclusion_criteria\n","WHERE adult_patients.icustay_id = exclusion_criteria.icustay_id\n","\"\"\"\n","\n","query_schema = 'SET SEARCH_PATH TO public, mimiciii;'\n","execute_query_safely(query_schema + query, con, cur)"]},{"cell_type":"code","execution_count":null,"id":"meaningful-movie","metadata":{"id":"meaningful-movie"},"outputs":[],"source":["# Commit to the database:\n","con.commit()"]},{"cell_type":"code","execution_count":null,"id":"attractive-impact","metadata":{"id":"attractive-impact","outputId":"33a37e3a-8e84-4d06-f337-e9be8184c147"},"outputs":[{"name":"stdout","output_type":"stream","text":["Subjects requiring ventilation within 24 hours:  29448\n"]}],"source":["# Check if the number of excluded subject is correct:\n","query = \"\"\" SELECT * FROM adult_patients \"\"\"\n","query_output = pd.read_sql_query(query, con)\n","print('Subjects requiring ventilation within 24 hours: ',\n","      query_output['exclusion_mechanical_ventilation'].sum())"]},{"cell_type":"code","execution_count":null,"id":"relevant-archives","metadata":{"id":"relevant-archives"},"outputs":[],"source":["# Close the connection:\n","con.close()"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.6"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}